< 
Function calls in gtl should have the following form:
To call the function post: (FunctionName <instance_name> parameters.. )
The function posts the result: (FunctionNameResult <instance_name> result)
>

<Tuple maker>

on (MakeTuple _tuple_name _length) {
  if equal (_length 0)
    post (MakeTupleResult _tuple_name ()) 
  else 
    on (TupleElement _tuple_name _element_number _value)
      if equal (match_count (TupleElement _tuple_name _a _b) _length)
        post (MakeTupleResult _tuple_name repeat _x _length
	  nth(0 match (TupleElement _tuple_name _x _v) _v) )
}

on (MakePostTuple _tuple_name _length) {
  post (MakeTuple _tuple_name _length)
  on (MakeTupleResult _tuple_name _tuple) post _tuple
}


<Code capable of creating arbitrary objects>
// TODO: so far this only creates a random flake
on (GetRandomObject _name)
  post (GetRandomObjectResult _name choose GetRandomObjectInt (any_flake))


<Generate and post _n random tuples>
on (PostRandomTuples _n _instance_name)
  repeat _instance_num _n 
    let _random_tuple_name (PostRandomTuples _instance_name _instance_num) {
    post (GetRandomTuple _random_tuple_name)
    on (GetRandomTupleResult _random_tuple_name _tuple)
      post _tuple
  }

<Generate a random tuple>

on (GetRandomTuple _name)
  let _tuple_size choose GetRandomTupleSize (quadratic_uint) {
    post (MakeTuple _name _tuple_size)
    repeat _pos _tuple_size {
      post (GetRandomObject (_name _pos) )
      on (GetRandomObjectResult (_name _pos) _o)
        post (TupleElement _name _pos _o)
    }	
    on (MakeTupleResult _name _tuple)
      post (GetRandomTupleResult _name _tuple)     
  }





< Code generator
   post (FunctionNumChildren post 1) <....>

   on (FunctionNumChildren f n) 
      post (FunctionByPopularity f 1.0 (choose new_flake))


    <create the program tree>
    repeat x (choose quadratic_uint)
      post (TopLevelStatement (choose new_flake))
    on (TopLevelStatement x) post (Statement x)
    on (Statement x) 
       post (HasFunction x (choose (blackboard FunctionByPopularity))) 
    on (HasFunction x f) post (FunctionByPopularity f 1.0 (choose new_flake))
    on (HasFunction x f) on (FunctionNumChildren f n) 
       post (StatementNumChildren x 
             if (equal (n -1) 
	     	choose (quadratic_uint) 
		n) )
    on (StatementNumChildren x n) 
       repeat n (StatementChild x (choose new_flake))
    on (StatementChild x y) post (Statement y)
    on (StatementNumChildren x 0) post (StatementChildrenComplete x)
    on (StatementChildrenComplete x) post (StatementComplete x)
    on (StatementComplete c) on (StatementChild p c) 
      post (StatementChildComplete p c)
    on (StatementChildComplete p c) on (StatementNumChildren p n)
       if (equal(match_count(StatementChildComplete p *) n)
           post (StatementChildrenComplete p) 0)
    on (StatementComplete x) on (TopLevelStatement x) add_code x
>
